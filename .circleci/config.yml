version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
docvarnode: &dok_node
    docker:
      - image: circleci/node:13.8.0

docvaraws: &dok_awscli
    docker:
      - image: amazon/aws-cli    

docansibl: &dok_ansible
    docker:
      - image: python:3.7-alpine3.11

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID}"
commands:
  destroy_environment:
    description: Destroy Cloud Stacks & infrastructure
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- restore-cache:
      - run:
          name: Run Frontend test
          command: |
            cd frontend
            npm install
            npm run test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- restore-cache:
      - run:
          name: Run Backend test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: scan-frontend
          command: |
            # Your code here
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: scan-backend
          command: |
            # Your code here
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: "yum install -y tar gzip"
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
              #exit 1
      - run:
         name: Ensure front-end infrastructure exist
         command: |
           aws cloudformation deploy \
           --template-file .circleci/files/frontend.yml \
           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
           --tags project=udapeople 
            #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "" > .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            #exit 1
      - persist_to_workspace:
          root: ~/
          paths: project/.circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e3:11:4f:ab:2a:78:cb:96:06:90:5c:37:dd:bf:fd:48"] # You can get this ID in the section where you registered the SSH Key
        # attach workspace
      - attach_workspace:
          at: project/.circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk add curl
            pip3 install awscli
            rm -rf /car/cache/apk/*
            aws --version 
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            exit 1
      # Here's where you will add some code to rollback on failure   
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and sve the migration output
            npm run migrations > migrations_dump.txt
            #exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            #exit 1
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip
            #yum install -y nodejs
            #yum install -y npm
            #yum install -y ansible
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure            
workflows:
  default:
     jobs:
     # - build-frontend
     # - build-backend
     # - test-frontend:
     #     requires: [build-frontend]
     # - test-backend:
     #     requires: [build-backend]
     # - scan-frontend:
     #     requires: [build-frontend]
     # - scan-backend:
     ##     requires: [build-backend] 
       - deploy-infrastructure
       - configure-infrastructure:
           requires: [deploy-infrastructure]
     #- run-migrations
     # deploy-frontend
